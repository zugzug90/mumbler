local flow = require "ludobits.m.flow"
local mumbler = require "lib/mumbler"

function init(self)
	msg.post(".", "acquire_input_focus")
	print(msg.url()) 
	self.dialog_panel_text_label = gui.get_node('dialog_panel_text_label')
	gui.set_text(self.dialog_panel_text_label, '')
	self.is_talking = false
	self.selected_voice_syllable = '#syllable'
	self.icon_voice_male = gui.get_node('voice_icon_male')
	--gui.set_color(self.icon_voice_male, vmath.vector4(220/255, 100/255, 0, 1))
	self.male_radio_button_icon = gui.get_node('radio_button_male_icon')
	self.female_radio_button_icon = gui.get_node('radio_button_female_icon')
	gui.set_enabled(self.female_radio_button_icon, false)
	self.voice_icon_male = gui.get_node('voice_icon_male')
	self.voice_icon_female = gui.get_node('voice_icon_female')

	self.radio_button_lang_en = gui.get_node('radio_button_lang_en')
	self.radio_button_lang_ru = gui.get_node('radio_button_lang_ru')
	
	self.lang_gui_en_box = gui.get_node('lang_gui_en_box')
	self.lang_gui_ru_box = gui.get_node('lang_gui_ru_box')
	
	gui.set_enabled(self.radio_button_lang_ru, false)
	self.ru_voiceline = 'Съешь же ещё этих мягких французских булок!\nДа выпей чаю.'
	self.en_voiceline = 'The quick brown fox. jumps over! the lazy dog?'
	self.selected_voiceline = self.en_voiceline

	self.overlapping_koeff_box_025 = gui.get_node('overlapping_koeff_box_025')
	self.overlapping_koeff_box_015 = gui.get_node('overlapping_koeff_box_015')
	self.overlapping_koeff_box_0 = gui.get_node('overlapping_koeff_box_0')

	self.radio_button_overlapping_koeff_025 = gui.get_node('radio_button_overlapping_koeff_025')
	self.radio_button_overlapping_koeff_015 = gui.get_node('radio_button_overlapping_koeff_015')
	self.radio_button_overlapping_koeff_0 = gui.get_node('radio_button_overlapping_koeff_0')

	self.selected_overlapping_koeff = 0.15
	gui.set_enabled(self.radio_button_overlapping_koeff_025, false)
	gui.set_enabled(self.radio_button_overlapping_koeff_0, false)

	self.radio_button_pronounce_pause_off = gui.get_node('radio_button_pronounce_pause_off')
	self.radio_button_pronounce_pause_on = gui.get_node('radio_button_pronounce_pause_on')

	self.pronounce_terminal_chars_as_pauses = false

	self.pronounce_pause_off_gui_box = gui.get_node('pronounce_pause_off_gui_box')
	self.pronounce_pause_on_gui_box = gui.get_node('pronounce_pause_on_gui_box')
	gui.set_enabled(self.radio_button_pronounce_pause_on, false)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then -- <2>
		local button = gui.get_node("play_button")
		
		if gui.pick_node(button, action.x, action.y) then -- <5>
			--gui.set_text(text, "HELLO!") -- <6>
			if self.is_talking == true then 
				return
			end
			msg.post('/game_screen_gui_object', 'reset_text')
			self.is_talking = true
			local on_char_start_pronouncing = function(char)
				print(' - [' .. char .. ']')
				msg.post('/game_screen_gui_object', 'append_char', {char = char})
			end
			local on_non_alphanumeric_char_met = function(char)
				msg.post('/game_screen_gui_object', 'append_char', {char = char})
			end
			local on_complete = function(text) 
				print('Done with the text: ', text)
				self.is_talking = false
			end
			local properties = {sound_duration_seconds = 0.15, overlapping_koeff = self.selected_overlapping_koeff, on_char_start_pronouncing = on_char_start_pronouncing, on_complete = on_complete, 
			on_non_alphanumeric_char_met = on_non_alphanumeric_char_met,
			vary_char_pronounce = true,
			pronounce_terminal_chars_as_pauses = self.pronounce_terminal_chars_as_pauses
		}
			--mumbler.play_voice_line("Hello, World! And Bye-Bye, stranger! Привет, мир!", "#syllable", properties)
			mumbler.play_voice_line(self.selected_voiceline, self.selected_voice_syllable, properties)
			--mumbler.play_voice_line("Hello, World! And Bye-Bye, stranger!", "#female_syllable", 0.15, 0.15)
			print("Touch!")
		elseif gui.pick_node(self.voice_icon_male, action.x, action.y) then
			--gui.set_text(text, "CLICK ME!") -- <7>
			self.selected_voice_syllable = '#syllable'
			gui.set_enabled(self.female_radio_button_icon, false)
			gui.set_enabled(self.male_radio_button_icon, true)
		elseif gui.pick_node(self.voice_icon_female, action.x, action.y) then
			self.selected_voice_syllable = '#female_syllable'
			gui.set_enabled(self.female_radio_button_icon, true)
			gui.set_enabled(self.male_radio_button_icon, false)
		elseif gui.pick_node(self.lang_gui_en_box, action.x, action.y) then
			self.selected_voiceline = self.en_voiceline
			gui.set_enabled(self.radio_button_lang_en, true)
			gui.set_enabled(self.radio_button_lang_ru, false)
		elseif gui.pick_node(self.lang_gui_ru_box, action.x, action.y) then
			self.selected_voiceline = self.ru_voiceline
			gui.set_enabled(self.radio_button_lang_en, false)
			gui.set_enabled(self.radio_button_lang_ru, true)
		elseif gui.pick_node(self.overlapping_koeff_box_025, action.x, action.y) then
			self.selected_overlapping_koeff = 0.25
			gui.set_enabled(self.radio_button_overlapping_koeff_025, true)
			gui.set_enabled(self.radio_button_overlapping_koeff_015, false)
			gui.set_enabled(self.radio_button_overlapping_koeff_0, false)
		elseif gui.pick_node(self.overlapping_koeff_box_015, action.x, action.y) then
			self.selected_overlapping_koeff = 0.15
			gui.set_enabled(self.radio_button_overlapping_koeff_015, true)
			gui.set_enabled(self.radio_button_overlapping_koeff_025, false)
			gui.set_enabled(self.radio_button_overlapping_koeff_0, false)
		elseif gui.pick_node(self.overlapping_koeff_box_0, action.x, action.y) then
			self.selected_overlapping_koeff = 0
			gui.set_enabled(self.radio_button_overlapping_koeff_0, true)
			gui.set_enabled(self.radio_button_overlapping_koeff_025, false)
			gui.set_enabled(self.radio_button_overlapping_koeff_015, false)
		elseif gui.pick_node(self.pronounce_pause_off_gui_box, action.x, action.y) then
			self.pronounce_terminal_chars_as_pauses = false
			gui.set_enabled(self.radio_button_pronounce_pause_off, true)
			gui.set_enabled(self.radio_button_pronounce_pause_on, false)
		elseif gui.pick_node(self.pronounce_pause_on_gui_box, action.x, action.y) then
			self.pronounce_terminal_chars_as_pauses = true
			gui.set_enabled(self.radio_button_pronounce_pause_off, false)
			gui.set_enabled(self.radio_button_pronounce_pause_on, true)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("append_char") then 
		gui.set_text(self.dialog_panel_text_label, gui.get_text(self.dialog_panel_text_label) .. message.char)
	elseif message_id == hash("reset_text") then 
		gui.set_text(self.dialog_panel_text_label, '')
	end
end
